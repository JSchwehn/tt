#!/usr/bin/env python3
# This is a script intended to track your project activities.
# It is really simple and I got the idea when using todolist on the command
# line. tymetracker (tt) is written entirely in Python 3 and stores the
# records in a json data structure in the user's home directory.
#
datafile = "~/.tt.json"
dateformat = "%Y-%m-%dT%H:%M:%S"


#############################################################################
### Here be dragons!
#############################################################################

# Import stuff we need
import copy
import datetime
import json
import os
import sys

# Sanity check: only proceed if we are in a python3 environment
try:
    assert sys.version_info >= (3,0)
except:
    print("Python 3 is required to run tt")
    sys.exit(1)


# Set variables we need
f = os.path.abspath(os.path.expanduser(datafile))



#############################################################################
### Helper functions
#############################################################################

class bcolors:
    """
    Define some colors that can be used in the terminal.
    """
    PURPLE = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    END = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def _get_project_id(data, project_id_or_name):
    """Look up and return a project's ID if it exists.
    If the project ID is given, this ID will be returned if the project
    exists in the data. If a project's name is given, this function
    looks up the name in data and return the ID of the project.
    If the project could not be found, this function returns None.
    """
    # If we have a positive number project_id_or_name could be the
    # ID itself. Let's check
    if project_id_or_name.isdigit():
        if project_id_or_name in data["projects"].keys():
            return project_id_or_name

    # project_id_or_name is not the project ID. Let's search all projects'
    # names
    for project_id, project in data["projects"].items():
        if project_id_or_name == project["name"]:
            return project_id

    # Ok, did not find anything yet. Maybe the case of the letters is
    # different... since we found nothing yet, let's try that.
    # Note, that case-removing conversions in unicode aren't trivial. There
    # is text for which text.lower() != text.upper().lower(), such as "ß":
    #  "ß".lower()
    #  #>>> 'ß'
    #  "ß".upper().lower()
    #  #>>> 'ss'
    for project_id, project in data["projects"].items():
        if project_id_or_name.lower() == project["name"].lower():
            return project_id

    # We could not find the string neither in the IDs nor in the names.
    # Giving up.
    return None


def _get_project_name(data, project_id):
    """
    Get a project's name. Consider using _project_name() function below if
    you need to display the project's name in-line.
    """
    try:
        return data["projects"][project_id]["name"]
    except:
        return None


def _project_name(data, project_id):
    """
    Returns a string that can be used every time when a project's name needs
    do be displayed. Using this function makes sure that the name is always
    printed in the same way making it easier to use tt.
    """
    pname = _get_project_name(data, project_id)
    if pname is not None:
        # r = "\"{cpb}{pname}{ce}\" ({cib}{i}{ce})".format(
        r = "{cib}{i}{ce}: \"{pname}\"".format(
                                                     cpb=bcolors.END,
                                                     pname=pname,
                                                     ce=bcolors.END,
                                                     cib=bcolors.YELLOW,
                                                     i=project_id)
    else:
        r = None

    return r


def _timestamp():
    """
    Return a timestamp.
    This timestamp is crucial since it is used in the JSON file to store
    the beginning and end of the the time periods.
    We use the ISO format to ensure that humans can read (and modify) the
    values manually if needed.
    """
    return datetime.datetime.now().strftime(dateformat)


def _time_diff(started, stopped):
    """
    Calculate the difference between to datetimes.
    Returns a 3-tuple containing
        seconds as float (e.g., 23132.0 seconds)
        hour_frac as float (e.g., 0.3455353 hours)
        hhmm as string (e.g., 01:23)
    """
    a = datetime.datetime.strptime(started, dateformat)
    b = datetime.datetime.strptime(stopped, dateformat)
    c = b - a
    seconds = c.total_seconds()
    hour_frac = seconds / 3600
    hhmm = "{h:02}:{m:02}".format(h=c.seconds//3600, m=(c.seconds//60)%60)

    # return tuple
    return (seconds, hour_frac, hhmm)


def _to_day_and_time(isodateformat):
    """
    Return the day and the time from an ISO-formatted date.
    Given a timestamp, the day and the time will be returned as a 2-tuple with
    the day in format YYYY-mm-dd as first element and the time in format HH:MM
    as the second element of the tuple.
    """
    day = datetime.datetime.strptime(isodateformat, dateformat).strftime('%Y-%m-%d')
    time = datetime.datetime.strptime(isodateformat, dateformat).strftime('%H:%M')
    return (day, time)



#############################################################################
### Data file functions
#############################################################################

def load():
    """
    Load the JSON datafile and return a dict with all the values.
    """
    try:
        fp = open(f, "r")
        data = json.load(fp)
        fp.close()
    except FileNotFoundError as e:
        print("Could not load data file. Please run", bcolors.YELLOW, "init", bcolors.END, "first.")
        sys.exit(3)
    except Exception as e:
        print(e)
        sys.exit(4)

    if data is None:
        print("Read corrupt data from", f)
        sys.exit(5)

    return data


def save(data):
    """
    Write the data dict object to disk in JSON format.
    """
    if data is not None:
        try:
            fp = open(f, "w")
            json.dump(data, fp, indent=2)
            fp.flush()
            fp.close()
        except Exception as e:
            print(e)
            sys.exit(7)
    else:
        print("No data to write")



#############################################################################
### Generic functions
#############################################################################

def init():
    """
    Initialize a new datafile if it does not exist.
    Cannot overwrite existing datafile, needs to be manually
    deleted beforehand.
    """
    if os.path.isfile(f):
        print("Data file {} already exists".format(f))
        sys.exit(2)
    else:
        print("Initializing new data file {}".format(f))

        # Initialize new data dict
        data = {
                "meta": {
                    "last_id": 0,
                    "file_version": 1,
                    },
                "tracking": {
                    "active": False,
                    "project": None,
                    "started": None,
                    },
                "projects": {
                    # id:    {
                        # "name": Projektname,
                        # "history": [] # tuples (start, stop, mins)
                    # }
                    },
                }

        # ... and write it to data file
        save(data)


def status():
    """
    Display some information about the current state. If the tracker
    is active this function displays a brief summary of the recent
    work period.
    """
    data = load()
    number_of_projects = len(data["projects"])
    print("{} projects".format(number_of_projects))
    if not data["tracking"]["active"]:
        print("No active time tracking")
    else:
        since = data["tracking"]["started"]
        project_id = data["tracking"]["project"]
        _, hf, hhmm = _time_diff(since, _timestamp())
        print("Tracking time in project {name} for {hhmm} ({hf:0.2f} hours)".format(name=_project_name(data, project_id), hf=hf, hhmm=hhmm))


def cleanup():
    """Clean up the projects.
    This function will reassign new IDs to the project.
    After the reorganization the file is saved to disk.
    """
    data = load()

    # iterate the projects and reassign new IDs
    old_projects = copy.deepcopy(data["projects"])
    project_id = 0
    data["projects"] = {}
    for project in old_projects.values():
        project_id = project_id + 1
        data["projects"][project_id] = project

    # set the correct last ID
    data["meta"]["last_id"] = project_id

    # write to disk
    save(data)
    print("Successfully cleaned up {}".format(datafile))


def usage():
    """
    Print the list of commands that are supported. This function is
    called if the users calls tt with no or too few arguments.
    """
    group = {
            "Generic commands": {
                "init": "Initialize new data file",
                "status/st": "Display tracker status information",
                "cleanup/c": "Cleanup and reorganize data file",
                },
            "Projects": {
                #"DESC": "Projects are needed for time tracking",
                "add/a project name": "Add new project with name \"project name\"",
                "delete/d 23": "Delete project with id 23",
                "list/l": "List projects and their ids",
                },
            "Tracking": {
                #"DESC": "Time tracking is about time tracking",
                "start 23": "Starts time tracking for project id 23",
                "stop": "Stops active time tracking",
                "show/s": "Show tracked times for all projects",
                "show/s 23": "Show tracked times and some additional information for project 23",
                }
            }

    # Display the commands/dicts
    for group, commands in sorted(group.items()):
        print(bcolors.PURPLE, "\n{group}".format(group=group), bcolors.END)

        # print the DESC if needed
        if "DESC" in commands:
            print("{desc}".format(desc=commands["DESC"]))

        # print all commands (and not DESC)
        for command, description in sorted(commands.items()):
            if command is not "DESC":
                print(bcolors.YELLOW, "    {cmd:20s}".format(cmd=command), bcolors.END, description)



#############################################################################
### Projects
#############################################################################

def list_projects():
    """
    Print all existing projects.
    """
    data = load()
    p = data.get("projects", {})

    if len(p) == 0:
        print("No projects found.")
    else:
        for project_id, project_data in sorted(p.items()):
            #print("    {i:>3}   {n}".format(i=project_id, n=project_data["name"]))
            print("    {cb}{i:>3}{ce}   {n}".format(cb=bcolors.YELLOW, i=project_id, ce=bcolors.END, n=project_data["name"]))


def add_project():
    """
    Add a project.
    You need to specify a project name. The project name can contain spaces.
    When created, this function prints the id of the created project.
    """
    if len(sys.argv) < 3:
        print("You must specify a project name")
        sys.exit(10)

    name = " ".join(sys.argv[2:]).strip()

    data = load()
    project = {}
    project_id = int(data["meta"].get("last_id", 0)) + 1

    # If there is a bogus last_id in our file, we need to make sure that no
    # existing data will be overwritten

    # We build a list of ints here. It is noteworthy that .keys() gives us a
    # dict_keys object of strings. The map function converts all these
    # strings to int.
    existing_project_ids = map(int, data.get("projects", {}).keys())
    if project_id in existing_project_ids:
        # Get the biggest existing project ID and increase it by 1
        project_id = max(existing_project_ids) + 1

    project["name"] = name
    project["history"] = []

    projects = data.get("projects", {})
    projects[project_id] = project

    data["meta"]["last_id"] = project_id
    data["projects"] = projects

    save(data)

    print("Created project {name}".format(name=_project_name(data, project_id)))


def del_project():
    """
    Delete a project.
    You need to specify a project id.
    """
    if len(sys.argv) < 3:
        print("You must specify a project id")
        list_projects()
        sys.exit(11)

    project_id = sys.argv[2]

    data = load()
    if project_id not in data.get("projects", {}):
        print("Project {cb}{pid}{ce} not found".format(cb=bcolors.YELLOW, pid=project_id, ce=bcolors.END))
        sys.exit(12)
    else:
        print("Project {name} deleted".format(name=_project_name(data, project_id)))
        del data["projects"][project_id]
        save(data)



#############################################################################
### Time tracking
#############################################################################

def start_tracking():
    """
    Start a tracker for a given project.
    You must specify a project id when starting a tracker. The recorded
    time will be stored in the particular project's context.
    If a tracker is alreay active, a warning will be displayed and the
    tracker will not be started.
    """
    if len(sys.argv) < 3:
        print("You must specify a project id")
        list_projects()
        sys.exit(20)

    data = load()

    project_id = _get_project_id(data, sys.argv[2])

    # Check if there is an active tracker
    if data["tracking"]["active"]:
        try:
            since = data["tracking"]["started"]
            tracking_id = data["tracking"]["project"]
            _, hf, hhmm = _time_diff(since, _timestamp())
            print("Tracker already started for project {name}".format(name=_project_name(data, tracking_id)))
            sys.exit(21)
        except Exception as e:
            # We have an active tracker but it cannot be read.
            # This might happen if this tracker refers to a non-existing
            # project ID. Reset tracking settings and continue.
            print("Stopped faulty tracker marked as active: {}".format(e))
            data["tracking"]["active"] = False
            data["tracking"]["project"] = None
            data["tracking"]["started"] = None

    # Check if project ID exists
    if project_id not in data.get("projects", {}):
        print("Project {cb}{pid}{ce} not found".format(cb=bcolors.YELLOW, pid=project_id, ce=bcolors.END))
        sys.exit(12)

    data["tracking"]["active"] = True
    data["tracking"]["project"] = project_id
    data["tracking"]["started"] = _timestamp()

    save(data)
    print("Tracker started for project {name}".format(name=_project_name(data, project_id)))


def stop_tracking():
    """
    Stop a running tracker.
    No need to specify a project id (will be ignored). If no active tracker
    is found, an error is printed to the console.
    """
    data = load()
    if not data["tracking"]["active"]:
        print("No active tracker")
        sys.exit(0)

    try:
        project_id = data["tracking"]["project"]
        started = data["tracking"]["started"]
        stopped = _timestamp()
        diff, hf, hhmm = _time_diff(started, stopped)

        # add tuple to history
        history = data["projects"][project_id]["history"]
        history.append( (started, stopped) )
        data["projects"][project_id]["history"] = history

        print("Tracker stopped for project {name} after {duration} ({hf:1.2f} hours)".format(name=_project_name(data, project_id), duration=hhmm, hf=hf))

    except Exception as e:
        # We have to deal with an entry we cannot read (and parse) correctly.
        # This might happen if the tracker refers to a non-existing project
        # ID. We should simply deactivate the tracker.
        print("Tracker stopped but an error occurred: {}".format(e))

    # reset tracking settings
    data["tracking"]["active"] = False
    data["tracking"]["project"] = None
    data["tracking"]["started"] = None

    save(data)
    


def show(limit = 10):
    """
    Show the recorded times.
    You can specify a project ID to show only the times for this particular
    project. If you do not specify a particular project, a list of all
    recorded times will be printed to the console in the following format:
      1   LRZ
              2017-07-31      07:53 - 16:58      09:05  (9.08 hours)
              2017-08-07      07:15 - 15:22      08:07  (8.12 hours)
              2017-08-10      07:56 - 11:00      03:04  (3.07 hours)
                              11:01 - 16:46      05:45  (5.76 hours)

    If limit is specifed, only the last limit + 1 log entries are displayed
    when no project ID is given (i.e. in the overview page). If a project
    ID is given, this limit will be ignored because we assume that the user
    wants to see every detail of the particular project.

    A running tracker will displayed independently from the limit.
    limit specifies the number of "finished" log entries to display.
    """
    data = load()
    project_ids = list() # list of project ids to display
    # first = True
    detailed_view = False

    if len(sys.argv) < 3:
        # no project ID given, get list of all available project IDs
        project_ids = sorted(list(data["projects"].keys()))
    elif len(sys.argv) >= 3:
        # project ID given, use it
        project_ids = sys.argv[2:]
        # project IDs are given, ignoring the limit
        limit = 0
        detailed_view = True
    else:
        # too many arguments, throw an error
        print("You must specify a project id")
        sys.exit(20)

    running_tracker = False
    try:
        running_tracker = data["tracking"]["active"]
        running_project = data["tracking"]["project"]
        running_since = data["tracking"]["started"]
        running_since_day, running_since_time = _to_day_and_time(running_since)
    except:
        # in case of any error, set running_tracker to False
        running_tracker = False

    for raw_project_id in project_ids:
        project_id = _get_project_id(data, raw_project_id)
        if project_id is None:
            # could not look up project's ID
            # inform user and continue with next ID
            print("Project {cb}{pid}{ce} not found".format(cb=bcolors.YELLOW, pid=raw_project_id, ce=bcolors.END))
            continue

        try:
            project_name = data["projects"][project_id]["name"]
            history = data["projects"][project_id]["history"]
        except KeyError as e:
            # Key (project_id) not found
            # continue with next loop run
            continue
   
        # Print the project's name
        print("    {cb}{i:>3}{ce}   {n}".format(cb=bcolors.YELLOW, i=project_id, ce=bcolors.END, n=project_name))

        # print the history
        if len(history) == 0:
            # If no history items are found, continue with next loop run
            print("              No entries")
            continue
    
        old_day = ""
        total = 0.0
        
        if limit:
            history_to_display = history[(len(history) - limit):]
            skipped = len(history) - limit
            if skipped > 0:
                if skipped == 1:
                    txt = "1 more entry"
                else:
                    txt = "{nt} more entries".format(nt = skipped)
                
                print("              ... {t} - use \"{bin} {cmd} {pid}\" to display complete history".format(t=txt, bin=os.path.basename(sys.argv[0]), cmd=sys.argv[1], pid=project_id))
        else:
            history_to_display = history

        for item in sorted(history_to_display):
            started, stopped = item
            secs, hf, hhmm = _time_diff(started, stopped)
            total = total + hf
            day, time_started = _to_day_and_time(started)
            _, time_stopped = _to_day_and_time(stopped)
            str_day = "{day:16}".format(day=day)
            if day == old_day:
                str_day = " "*16
            
            print("              {sd}{started:5} - {stopped:11}{hhmm:7}({hf:1.2f} hours)".format(sd=str_day, started=time_started, stopped=time_stopped, hhmm=hhmm, hf=hf))
            old_day = day

        if running_tracker and running_project == project_id:
            time_stopped = ""
            _, hf, hhmm = _time_diff(running_since, _timestamp())
            total = total + hf
            str_day = "{day:16}".format(day=running_since_day)
            if running_since_day == old_day:
                str_day = " "*16
            print("              {sd}{started:5} - {stopped:11}{hhmm:7}({hf:1.2f} hours)      tracking".format(sd=str_day, started=running_since_time, stopped=time_stopped, hhmm=hhmm, hf=hf))

        if detailed_view:
            print("              Total time tracked: {hf:9.2f} hours".format(project=_project_name(data, project_id=project_id), hf=total))
            


#############################################################################
### Entry point
#############################################################################

"""
Main function/entry point when starting the program.
Parses the arguments and calls the appropriate functions.
"""
if len(sys.argv) <= 1:
    usage()
elif sys.argv[1].lower() == "init":
    init()
elif sys.argv[1].lower() == "st" or sys.argv[1].lower() == "status":
    status()
elif sys.argv[1].lower() == "l" or sys.argv[1].lower() == "list":
    list_projects()
elif sys.argv[1].lower() == "a" or sys.argv[1].lower() == "add":
    add_project()
elif sys.argv[1].lower() == "d" or sys.argv[1].lower() == "delete":
    del_project()
elif sys.argv[1].lower() == "start":
    start_tracking()
elif sys.argv[1].lower() == "stop":
    stop_tracking()
elif sys.argv[1].lower() == "s" or sys.argv[1].lower() == "show":
    show()
elif sys.argv[1].lower() == "c" or sys.argv[1].lower() == "cleanup":
    cleanup()
else:
    usage()

# eof. thank you.
